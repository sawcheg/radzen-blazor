@page "/datagrid-selfref-hierarchy"

@using RadzenBlazorDemos.Data
@using RadzenBlazorDemos.Models.Northwind
@using Microsoft.EntityFrameworkCore

@inherits DbContextPage

<h1>DataGrid Self-Reference Hierarchy</h1>

<p>This page demonstrates how to use LoadChildData event to create a Radzen Blazor DataGrid self-reference hierarchy.</p>

<RadzenExample Name="DataGrid" Source="DataGridSelfReferenceHierarchy" Heading="false">
    <RadzenDataGrid @ref="grid" AllowFiltering="true" AllowSorting="true" AllowColumnResize="true" ExpandMode="DataGridExpandMode.Single"
                    Data="@employees" TItem="Employee" RowRender="@RowRender" LoadChildData="@LoadChildData">
        <Columns>
            <!-- <RadzenDataGridColumn TItem="Employee" Property="EmployeeID" Filterable="false" Title="ID" Frozen="true" Width="120px" /> -->
            <RadzenDataGridColumn TItem="Employee" Title="Employee" Frozen="true" Sortable="false" Filterable="false" Width="300px">
                <Template Context="data">
                    <RadzenImage Path="@data.Photo" class="rz-gravatar me-1" />
                    <strong>@data.TitleOfCourtesy @data.FirstName @data.LastName</strong>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Employee" Property="Title" Title="Job Title" Width="240px" />
            <RadzenDataGridColumn TItem="Employee" Property="HireDate" Title="Hire Date" FormatString="{0:d}" Width="160px" />
            <RadzenDataGridColumn TItem="Employee" Property="City" Title="City" Width="200px" />
            <RadzenDataGridColumn TItem="Employee" Property="HomePhone" Title="Home Phone" Width="200px" />
            <RadzenDataGridColumn TItem="Employee" Property="Extension" Title="Extension" />
        </Columns>
    </RadzenDataGrid>
</RadzenExample>
@code {
    IEnumerable<Employee> employees;
    RadzenDataGrid<Employee> grid;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        employees = dbContext.Employees.Where(e => e.ReportsTo == null);
    }

    void RowRender(RowRenderEventArgs<Employee> args)
    {
        args.Expandable = dbContext.Employees.Where(e => e.ReportsTo == args.Data.EmployeeID).Any();
    }

    void LoadChildData(DataGridLoadChildDataEventArgs<Employee> args)
    {
        args.Data = dbContext.Employees.Where(e => e.ReportsTo == args.Item.EmployeeID);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            await grid.ExpandRow(employees.FirstOrDefault());
        }
    }
}