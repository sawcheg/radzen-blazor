@page "/dropdown-grouping"
@using System.Collections
@using RadzenBlazorDemos.Data
@using RadzenBlazorDemos.Models.Northwind
@using Microsoft.EntityFrameworkCore

@inherits DbContextPage

<RadzenExample Name="DropDownGrouping">
<div class="container-fluid">
    <div class="row px-3">
        <div class="col-md-6 p-3">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">DropDown with groups</RadzenText>
                    <RadzenDropDown TValue="int" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    Data=@groupedData DisabledProperty="IsGroup" ValueProperty="OrderID" TextProperty="OrderID"
                                    Change=@(args => OnChange(args, "DropDown with groups")) Class="w-100">
                        <Template>
                                @(context.CompanyName ?? $"OrderID: {context.OrderID}, Order date: {string.Format("{0:d}", context.OrderDate)}")
                        </Template>
                    </RadzenDropDown>
            </RadzenCard>
        </div>
        <div class="col-md-6 p-3">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">DropDown with groups and multiple selection</RadzenText>
                    <RadzenDropDown TValue="int" Multiple=true AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    Data=@groupedData DisabledProperty="IsGroup" ValueProperty="OrderID" TextProperty="OrderID"
                                    Change=@(args => OnChange(args, "DropDown with groups and multiple selection")) Class="w-100">
                        <Template>
                                @(context.CompanyName ?? $"OrderID: {context.OrderID}, Order date: {string.Format("{0:d}", context.OrderDate)}")
                        </Template>
                    </RadzenDropDown>
            </RadzenCard>
        </div>
    </div>
</div>
</RadzenExample>

<EventConsole @ref=@console Class="mt-4" />

@code {
    EventConsole console;
    IEnumerable<Order> orders;
    IEnumerable<GroupData> groupedData;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        orders = dbContext.Orders.Where(o => o.CustomerID != null).Include("Customer").ToList();

        groupedData = orders.GroupBy(g => g.Customer.CompanyName)
            .SelectMany(i => new GroupData[] { new GroupData() { CompanyName = i.Key } }
                .Concat(i.Select(o => 
                    new GroupData() 
                    { 
                        OrderID = o.OrderID,
                        OrderDate = o.OrderDate
                    }))).ToList();
    }

    class GroupData
    { 
        public string CompanyName { get; set; }
        public int OrderID { get; set; }
        public DateTime? OrderDate { get; set; }
        public bool IsGroup { get { return CompanyName != null; } }
    }

    void OnChange(object value, string name)
    {
        var str = value is IEnumerable ? string.Join(", ", ((IEnumerable)value).Cast<object>()) : value;

        console.Log($"{name} value changed to {str}");
    }
}
