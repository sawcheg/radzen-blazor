@page "/dropdown-virtualization"

@using RadzenBlazorDemos.Data
@using RadzenBlazorDemos.Models.Northwind
@using Microsoft.EntityFrameworkCore

@inherits DbContextPage

<RadzenExample Name="DropDownVirtualization">
<div class="container-fluid">
    <div class="row px-3">
        <div class="col-md-6 p-3">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Virtualization using IQueryable</RadzenText>
                <RadzenDropDown AllowClear="true" TValue="string" AllowVirtualization="true" Class="w-100" 
                                AllowFiltering="true" Data=@customers TextProperty="CompanyName" ValueProperty="CustomerID"
                                Change=@(args => OnChange(args, "DropDown with virtualization")) />
            </RadzenCard>
        </div>
        <div class="col-md-6 p-3">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Virtualization using LoadData event</RadzenText>
                <RadzenDropDown AllowClear="true" TValue="string" AllowVirtualization="true" Class="w-100" 
                                LoadData=@LoadDataVirtualization AllowFiltering="true" Count="@count"
                                Data=@customCustomersDataVirtualization TextProperty="CompanyName" ValueProperty="CustomerID"
                                Change=@(args => OnChange(args, "DropDown with LoadData virtualization")) />
            </RadzenCard>
        </div>
    </div>
</div>
</RadzenExample>

<EventConsole @ref=@console Class="mt-4" />

@code {
    IEnumerable<Customer> customers;

    int count;
    IEnumerable<Customer> customCustomersDataVirtualization;

    EventConsole console;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        customers = dbContext.Customers.ToList();
    }

    void OnChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        console.Log($"{name} value changed to {str}");
    }

    void LoadDataVirtualization(LoadDataArgs args)
    {
        var query = dbContext.Customers.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(c => c.CustomerID.ToLower().Contains(args.Filter.ToLower()) || c.ContactName.ToLower().Contains(args.Filter.ToLower()));
        }

        console.Log($"LoadData with virtualization: Skip:{args.Skip}, Top:{args.Top}, Filter:{args.Filter}");

        count = query.Count();

        customCustomersDataVirtualization = query.Skip(args.Skip.HasValue ? args.Skip.Value : 0).Take(args.Top.HasValue ? args.Top.Value : 10).ToList();

        InvokeAsync(StateHasChanged);
    }
}
